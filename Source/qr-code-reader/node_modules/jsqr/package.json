{
  "name": "jsqr",
  "version": "0.2.2",
  "description": "QR code detection, extraction, decoding and parsing written as pure JS port of the ZXing library.",
  "repository": {
    "type": "git",
    "url": "https://github.com/cozmo/jsQR"
  },
  "main": "./dist/jsQR.js",
  "contributors": [
    {
      "name": "Cosmo Wolfe",
      "email": "cosmo.wolfe@gmail.com"
    },
    {
      "name": "Jefff Nelson",
      "email": "gmjefff@gmail.com"
    }
  ],
  "license": "Apache-2.0",
  "devDependencies": {
    "mocha": "^2.3.4",
    "ts-loader": "^0.7.2",
    "ts-node": "^0.5.4",
    "typescript": "^1.7.3",
    "webpack": "^1.12.9"
  },
  "scripts": {
    "build": "node ./node_modules/webpack/bin/webpack.js",
    "watch": "node ./node_modules/webpack/bin/webpack.js --watch",
    "test": "node ./node_modules/mocha/bin/mocha --require ts-node/register ./test/test-*.ts"
  },
  "readme": "# jsQR\n\n[![Build Status](https://travis-ci.org/cozmo/jsQR.svg?branch=master)](https://travis-ci.org/cozmo/jsQR)\n\nA pure javascript port of the [ZXing](https://github.com/zxing/zxing) QR parsing library.\nThis library takes in raw images and will locate, extract and parse any QR codes found within.\nIt also exposes methods to do each step of the process individually.\nThis allows piecemeal use and custom extension, for example you can use this library to parse pure QR codes (without extracting from an image), or to locate QR codes within an image without parsing them.\n\n[See a demo](https://s3-us-west-2.amazonaws.com/templaedhel/jsQR/features.html)\n\n## Motivation\n\nThis library was written because there were no javascript QR code parsing libraries that were well maintained and capable of parsing any reasonably complex QR codes.\n\n[See how jsQR compares to other JS QR code decoders](https://s3-us-west-2.amazonaws.com/templaedhel/jsQR/comparison.html)\n\n[ZXing](https://github.com/zxing/zxing) is the best QR code library, and had been ported to many languages, but not to Javascript.\njsQR is a fully featured port of the QR code portions of the zxing library, with the goal of growing into a maintainable and extendable QR parsing library in pure javascript.\n\n## Documentation\n\n### Installation\n\n#### NodeJS\n\n```\nnpm install jsqr --save\n```\n\n```javascript\njsQR = require(\"jsqr\");\n```\n\n#### Browser\n\nInclude [`jsQR.js`](./dist/jsQR.js).\n\n```html\n<script src=\"jsQR.js\"></script>\n```\n\nYou can also use module loaders such as [requireJS](http://requirejs.org/) or [browserify](http://browserify.org/)\n\n### Usage\n\nqrJS exports methods for each step in the QR recognition, extraction and decoding process, as well as a convenience wrapper method.\n\n#### Examples\n\nUsing the wrapper method\n```javascript\nvar decoded = jsQR.decodeQRFromImage(data, width, height);\n```\n\nUsing the individual methods\n```javascript\nvar binarizedImage = binarizeImage(data, width, height);\nvar location = locateQRInBinaryImage(binarizedImage);\nif (!location) {\n  return;\n}\nvar rawQR = extractQRFromBinaryImage(binarizedImage, location);\nif (!rawQR) {\n  return;\n}\n\nconsole.log(decodeQR(rawQR));\n```\n\n[Working example of parsing a webcam feed](https://s3-us-west-2.amazonaws.com/templaedhel/jsQR/example.html)\n\n### Methods\n\n#### qrJS.decodeQRFromImage(data, width, height)\n\n`decodeQRFromImage` is a wrapper method for the different steps of the QR decoding process.\nIt takes in a RGBA image and returns a string representation of the data encoded within any detected QR codes.\n\n##### Arguments\n- `data` - An 1d array of numbers representing an RGBA image in the form `r1, g1, b1, a1, r2, g2, b2, a2,...`. This is the same form as the [`ImageData`](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) type returned by the `.getImageData()` call when reading data from a canvas element.\n- `width` - The width of the image.\n- `height` The height of the image.\n\n`data.length` should always be equal to `width * height * 4`.\n\n#### qrJS.binarizeImage(data, width, height)\n\nBinarizing an image (converting it to an image where pixels are either back or white, not grey) is the first step of the process.\nbinarizeImage takes in a RGBA image and returns a [`BitMatrix`](#bitmatrices) representing the binarized form of that image.\n\n##### Arguments\n- `data` - An 1d array of numbers representing an RGBA image in the form `r1, g1, b1, a1, r2, g2, b2, a2,...`. This is the same form as the [`ImageData`](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) type returned by the `.getImageData()` call when reading data from a canvas element.\n- `width` - The width of the image.\n- `height` The height of the image.\n\n`data.length` should always be equal to `width * height * 4`.\n\n#### qrJS.locateQRInBinaryImage(image)\n\n`locateQRInBinaryImage` takes in a [`BitMatrix`](#bitmatrices) representing a binary image (as output by [`binarizeImage`](#qrjsbinarizeimagedata-width-height)) and returns the location of a QR code if one is detected.\n\n##### Arguments\n- `image` - a [`BitMatrix`](#bitmatrices) representing a binary image (as output by [`binarizeImage`](#qrjsbinarizeimagedata-width-height))\n\n##### Returns\n`locateQRInBinaryImage` returns `null` if no QR is found, else it returns an object with the following structure\n\n```javascript\n{\n  bottomLeft: {\n    x: number,\n    y: number\n  },\n  topLeft: {\n    x: number,\n    y: number\n  },\n  topRight: {\n    x: number,\n    y: number\n  }\n}\n```\nThe coordinates represent the pixel locations of the QR's corner points.\n\n#### qrJS.extractQRFromBinaryImage(image, location)\n\n`extractQRFromBinaryImage` takes in a [`BitMatrix`](#bitmatrices) representing a binary image (as output by [`binarizeImage`](#qrjsbinarizeimagedata-width-height)) and the location of a QR code. It returns a [`BitMatrix`](#bitmatrices) representing the raw QR code.\n\n##### Arguments\n- `image` - a [`BitMatrix`](#bitmatrices) representing a binary image (as output by [`binarizeImage`](#qrjsbinarizeimagedata-width-height))\n- `location` - The location of a QR code, as returned by [`locateQRInBinaryImage`](#qrjslocateqrinbinaryimageimage)\n\n##### Returns\n`extractQRFromBinaryImage` a [`BitMatrix`](#bitmatrices) representing the extracted QR code. The matrix is size `N` by `N` where `N` is the number of \"blocks\" along the edge of the QR code.\n\n#### qrJS.decodeQR(qrCode)\n\n`decodeQR` takes in a [`BitMatrix`](#bitmatrices) representing a raw QR code (as output by [`extractQRFromBinaryImage`](#qrjsextractqrfrombinaryimageimage-location)) and returns a string of decoded data. It is the last step in the QR decoding process.\n\n##### Arguments\n- `qrCode` - a [`BitMatrix`](#bitmatrices) representing a raw QR code (as output by [`extractQRFromBinaryImage`](#qrjsextractqrfrombinaryimageimage-location))\n\n#### BitMatrices\n\nThroughout the QR extraction and decoding process data is often represented as a `BitMatrix`.\nBitMatrices are a convenient way to represent and interact with a 2d array of booleans.\n\n##### Properties\n- `width` - The width of the matrix.\n- `height` - The height of the matrix.\n- `data` - The underlying data (represented as a 1d array)\n\n##### Methods\n- `get(x, y)` - Get the bit at specific coordinates.\n- `set(x, y, bit)` - Set the bit at specific coordinates.\n\n#### qrJS.createBitMatrix(data, width)\n`createBitMatrix` is a convenience method for creating bit matrices.\n\n##### Arguments\n- `data` - A 1d array of booleans representing the data represented by the bit matrix.\n- `width` - The width of the matrix (height is inferred by `data.length / width`).\n\n## State of the library\njsQR was originally written by porting over the ZXing C# library directly to typescript.\nThis lead to code that works extremely well, but may not follow best javascript practices.\n\nThe next steps (which are ongoing) are to port over any test cases (writing any that don't exist), and refactor each of the modules into more idomatic code.\nThe end goal is a pure JS library QR library that is as fully featured as the ZXing library, but maintainable and extendable in it's own right.\n\n## Contributing\n\njsQR is written using [typescript](http://www.typescriptlang.org/).\nYou can view the development source in the `src` directory.\n\nCurrently the library is very untested, but tests are being added as the library is refactored into more maintainable code.\nTests can be run via\n\n```\nnpm test\n```\n\nAfter testing any changes, you can compile the production version by running\n```\nnpm run-script build\n```\n\n- Source hosted at [GitHub](https://github.com/cozmo/jsQR)\n- Report issues, questions, feature requests on [GitHub Issues](https://github.com/cozmo/jsQR/issues)\n\nPull requests are welcome! Please create seperate branches for seperate features/patches.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cozmo/jsQR/issues"
  },
  "_id": "jsqr@0.2.2",
  "dist": {
    "shasum": "f2e143a5aaf1b547aeb2305710c1ae86f979d8fa"
  },
  "_from": "jsqr@",
  "_resolved": "https://registry.npmjs.org/jsqr/-/jsqr-0.2.2.tgz"
}
