/// <reference path="./mocha.d.ts" />
/// <reference path="./node.d.ts" />
import assert = require("assert")
import {decode} from "../src/decoder/decoder";
import {BitMatrix} from "../src/common/bitmatrix";

var stringToByteArray = function(str : string) : number[] {
  var result : number[] = []
  for (var i = 0; i < str.length; ++i) {
    result.push(str[i].charCodeAt(0));
  }
  return result;
};

describe('decoder', () => {
  it('correctly decodes basic QR code', () => {
    var data = [true,true,true,true,true,true,true,false,false,true,false,true,true,false,true,true,true,true,true,true,true,true,false,false,false,false,false,true,false,true,true,false,true,false,false,true,false,false,false,false,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,false,true,false,true,true,true,false,true,true,false,true,true,true,false,true,false,false,true,false,true,false,false,true,false,true,true,true,false,true,true,false,true,true,true,false,true,false,true,false,false,false,true,false,true,false,true,true,true,false,true,true,false,false,false,false,false,true,false,true,false,false,true,true,false,true,false,false,false,false,false,true,true,true,true,true,true,true,true,false,true,false,true,false,true,false,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,true,true,true,true,true,false,false,false,false,false,false,false,false,true,true,false,true,false,false,true,true,false,true,true,false,false,false,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,true,false,false,true,true,true,false,true,false,false,true,true,false,false,true,true,false,true,false,false,true,false,true,true,false,true,false,true,true,false,true,true,false,true,true,true,true,true,false,false,true,false,true,true,false,true,true,true,true,true,false,true,false,true,true,false,false,true,false,true,true,false,true,true,false,false,false,false,false,false,false,false,false,false,false,false,true,false,true,true,false,false,false,false,false,false,true,false,true,true,true,true,true,true,true,true,false,true,false,false,false,false,false,true,true,true,true,true,true,false,true,false,false,false,false,false,true,false,false,true,true,true,true,false,false,true,false,false,false,false,true,true,false,true,true,true,false,true,false,false,false,false,true,false,true,false,false,false,false,false,true,false,true,false,true,true,true,false,true,false,true,true,true,false,false,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,false,false,true,false,false,true,false,true,false,true,false,true,false,true,true,false,false,false,false,false,true,false,true,false,false,true,false,true,false,false,false,false,false,false,false,true,true,true,true,true,true,true,false,true,true,false,false,true,false,true,true,false,true,false,true,false ];
    var raw = new BitMatrix(data, 21);
    assert.deepEqual(decode(raw), stringToByteArray("hello world"));
  });

  it('correctly decodes a QR code with dashes', () => {
    var data = [true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,true,true,true,false,false,false,false,false,true,false,true,false,true,false,true,false,true,false,false,false,false,false,true,true,false,true,true,true,false,true,false,true,false,false,false,false,false,true,false,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,true,true,false,false,true,false,true,true,true,false,true,true,false,true,true,true,false,true,false,false,false,false,false,true,false,true,false,true,true,true,false,true,true,false,false,false,false,false,true,false,true,true,false,true,false,false,true,false,false,false,false,false,true,true,true,true,true,true,true,true,false,true,false,true,false,true,false,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,true,true,true,true,false,false,false,false,false,false,false,false,true,true,false,false,true,true,true,false,false,true,false,true,false,false,false,true,false,true,true,true,true,false,true,false,true,true,true,false,false,true,false,false,true,true,false,false,true,false,true,true,false,true,true,false,false,true,false,false,true,false,true,true,false,true,false,false,true,true,true,true,false,true,true,true,false,false,true,true,false,false,false,false,true,true,false,false,true,true,false,true,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,false,true,true,true,false,false,false,true,false,false,false,false,false,false,false,false,false,false,true,true,true,false,true,true,true,false,false,false,false,false,true,true,true,true,true,true,true,true,false,false,true,false,false,true,true,false,false,false,true,true,false,true,true,false,false,false,false,false,true,false,true,true,false,true,true,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,true,false,false,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,false,true,false,true,true,false,false,false,false,true,true,true,true,true,false,true,true,true,false,true,false,false,false,false,true,false,false,true,true,true,false,false,false,false,true,false,false,false,false,false,true,false,true,false,true,false,false,true,true,false,false,false,true,false,true,true,true,true,true,true,true,true,false,true,false,false,false,true,true,true,true,true,false,true,true,true];
    var raw = new BitMatrix(data, 21);
    assert.deepEqual(decode(raw), stringToByteArray("ABC-DEF"));
  });

  // Regression test
  // This QR hits the "mirrored" codepath during decoding, and also contains malformed data.
  it('correctly decodes malformed and mirrored QR codes', () => {
    var data = [false,true,true,true,true,true,true,false,false,false,false,true,false,true,true,true,true,false,false,true,true,true,true,true,true,true,false,false,false,false,false,true,false,false,true,true,false,false,false,false,false,false,false,true,false,false,false,false,false,true,true,false,true,true,true,false,true,false,true,true,true,true,true,true,false,true,false,false,true,false,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,true,false,true,true,true,false,true,true,false,true,true,true,false,true,false,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,false,true,true,false,false,false,false,false,true,false,false,false,false,true,true,false,true,true,true,false,true,false,false,false,false,false,true,true,true,true,true,true,true,true,false,true,false,true,false,true,false,true,false,true,false,true,true,true,true,true,true,true,false,false,false,false,false,false,false,false,false,false,true,true,false,true,false,true,false,false,false,false,false,false,false,false,false,true,true,true,false,false,true,true,true,true,false,true,false,true,false,false,true,false,true,false,false,true,true,true,false,false,true,false,true,false,false,true,false,true,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,false,true,true,true,false,false,true,true,true,true,false,false,true,true,true,false,false,true,false,true,false,false,true,false,true,true,true,true,true,true,false,false,false,true,true,false,true,false,false,false,true,false,true,true,true,false,false,true,false,false,false,false,false,true,true,true,true,true,false,false,false,true,false,false,false,true,false,true,false,true,true,true,true,false,true,true,true,false,true,false,false,false,false,false,true,false,true,false,false,false,true,false,false,false,false,true,false,true,false,true,true,false,false,false,true,false,true,true,true,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,false,true,true,false,false,true,true,true,false,true,false,false,false,false,false,false,false,false,false,false,true,true,true,false,true,true,false,false,false,false,true,true,true,true,true,true,true,false,true,false,true,false,true,true,true,true,true,true,false,false,false,true,false,false,false,false,false,false,false,false,true,false,true,false,true,false,false,true,true,false,false,false,true,false,true,true,false,false,true,true,true,true,true,true,false,true,true,false,false,false,true,true,true,true,false,true,false,true,true,true,false,false,true,false,false,false,false,false,true,false,true,false,true,true,false,true,true,true,true,false,false,false,true,false,true,false,true,true,false,true,true,true,false,true,false,false,false,false,false,true,false,false,false,true,true,true,true,true,true,false,false,true,true,false,true,true,true,false,true,false,false,false,true,false,true,false,false,false,true,false,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,false,false,false,true,false,false,false,true,true,true,false,true,false,false,false,false,true,false,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,false,false,false,false,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,true,true,true,true];
    var raw = new BitMatrix(data, 25);
    assert.deepEqual(decode(raw), stringToByteArray("Aiden Lee"));
  });
});
